package main

import (
	"fmt"
)

/**
请实现一个函数用来匹配包含'. '和'*'的正则表达式。
模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。
在本题中，匹配是指字符串的所有字符匹配整个模式。
例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。

示例 1:
输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。

示例 2:
输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。

示例 3:
输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。

示例 4:
输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。

示例 5:
输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

    s 可能为空，且只包含从 a-z 的小写字母。
    p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 *，无连续的 '*'。
*/

/**
首先我们定义dp数组dp[sLen+1][pLen+1]。
dp[i][j]表示：s中长度为i的部分可以匹配上p中长度为j的部分。
需要注意的是，“s中长度为i的部分”，指的是s[0]到s[i-1]，
因为i、j是表示长度的，所以具体到哪一位需要 -1。以此类推。初始化dp。
    先全部初始化为false，然后让dp[0][0]为true（s和p都为空时必然是true）；
    当s为空，p满足一定条件（比如p = "a*b*c*"）时，让dp[0][i]为true；
    当s不为空，p为空时，必然为false。此情况不必再处理，因为一开始就初始化了整个dp为false了；
    当s不为空，p也不为空时，需要开始执行动态规划过程。

s和p都从1开始遍历（因为它们为0的情况都已经处理过了）。
p中长度为j的元素（即p[j-1]）只有可能会是：正常字符、'.' 或 '*'。
此时开始分情况讨论：
3.1 如果p[j-1]是正常字符且等于s[i-1]，或者p[j-1]是'.'，
	判断dp[i][j]需要看的是它们前面的全部是否为true，即dp[i][j] = dp[i - 1][j - 1]。
3.2 如果p[j-1]是'*'，那么我们需要根据p[j-2]的值来分情况讨论，因为'*'的作用是让其前一位字符（即p[i-2]）出现任意次（0次、1次或多次）：
	- 假如p[j-2]是一个正常字符而且与s[i-1]不相等，且p[j-2]不等于'.'，
	  比如s："b"与p："a*"，我们只能让'*'的作用是“使a出现0次”，
	  从而dp[i][j]取决于dp[i][j-2]；
    - 否则假如p[j-2]是一个正常字符且与s[i-1]相等，或者p[j-2]等于'.'，那么情况有三种：'*'让p[j-2]出现0次、1次或多次：
		- 0次：比如说s："a"与p："aa*“。
		  即使s[i-1]与p[j-2]相等，但是s[i-1]早就与p[j-3]相等了（格林：在你来之前我们就是总冠军了），
		  那么'*'也只能忍痛让p[j-2]出现0次。
		- 1次：比如说s："a"与p："a*"。
		  这时候'*'只需要让其前面的"a"出现一次，
		  一切就会是刚刚好（詹姆斯：我来带你们成为总冠军）。
		- 多次：比如说s："aabb“与p："aab*"。
		  这时候只需要判断s的"aab"与p的"aab*”是否匹配，因为如果匹配的话，
		  即使s再多加一个b也没事，
		  因为p中的"*"可以保证b的量足够（C罗：我比你少几个金球奖我就要再拿几个金球奖！）。
3.3 假如p[j-1]是一个正常字符且不等于s[i-1]，dp[i][j]必为false。
*/
func isMatch(s string, p string) bool {
	sl := len(s)
	pl := len(p)
	dp := make([][]bool, sl+1)
	for index := range dp {
		dp[index] = make([]bool, pl+1)
	}
	for i := 0; i <= sl; i++ { // s的当前长度
		for j := 0; j <= pl; j++ { // p的当前长度
			if j == 0 {
				// 当s和p长度都为零时, 肯定匹配成功
				dp[i][j] = i == 0
				continue
			}
			if p[j-1] != '*' { // 当b不为 * 时, 注:(j-1是指长度为j的元素, 因为数组是从0开始的, 所以需要-1)
				if i > 0 && (s[i-1] == p[j-1] || p[j-1] == '.') { // 判断是否与s中的字符串匹配(相等或为.)
					dp[i][j] = dp[i-1][j-1] // 因为当前的已经匹配成功(看if条件)了, 所以这里的结果是之前的所有字符串是否被匹配成功
				}
				continue
			}
			// 这之后是 p[j-1]='*'
			if j >= 2 && dp[i][j-2] { // 如果j>=2 注: 这里是指s中的当前字符不是b中*重复的字符, 所以直接看面的是否匹配成功
				dp[i][j] = dp[i][j-2] // 根据前面的判断, 因为这里是x*, 占两个位置, 所以应该j-2
				// 这里不太好理解 注意看i, i是没有进行加减的, 所以是指看s[i-1]是否与p[i-1]之前的匹配成功
				continue
			}
			if i >= 1 && j >= 2 && (s[i-1] == p[j-2] || p[j-2] == '.') { // s中的当前字符是b中*重复的字符, 或b重复的直接是.
				dp[i][j] = dp[i-1][j] //看s前一个是否匹配成功, 解释与98行类似
			}
		}
	}
	return dp[sl][pl]
}

func main() {
	fmt.Println(isMatch("ab", ".*"))
	fmt.Println(isMatch("ab", "aa*bb*"))
}
